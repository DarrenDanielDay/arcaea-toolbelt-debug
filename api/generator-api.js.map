{"mappings":"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","sources":["<anon>","src/services/generator-api.ts","src/utils/rpc.ts","src/utils/future.ts","src/utils/invoke-capture.ts","src/utils/transfer.ts","src/utils/uuid.ts","src/models/character.ts","src/models/music-play.ts"],"sourcesContent":["const $361f21b027a6d55d$export$2a24d29abe187dc4 = ()=>{\n    let done, abort;\n    const promise = new Promise((resolve, reject)=>{\n        done = resolve;\n        abort = reject;\n    });\n    return {\n        promise: promise,\n        get done () {\n            return done;\n        },\n        get abort () {\n            return abort;\n        }\n    };\n};\n\n\nconst $a17045620d6d2fc4$export$580de71e7977e8d2 = (handler)=>{\n    const createProxy = (path)=>new Proxy(function noop() {}, {\n            get (_target, property) {\n                if (typeof property === \"symbol\") throw new Error(\"Cannot get symbol property.\");\n                return createProxy([\n                    ...path,\n                    property\n                ]);\n            },\n            apply (_target, _this, argArray) {\n                return handler(path, argArray);\n            }\n        });\n    return createProxy([]);\n};\n\n\nconst $668be2b72857150b$export$dfdc1655ccc5b9cb = (value)=>{\n    if (typeof value !== \"object\" || value == null) return value;\n    if (value instanceof URL) return {\n        _url: value.href\n    };\n    if (Array.isArray(value)) return value.map((item)=>$668be2b72857150b$export$dfdc1655ccc5b9cb(item));\n    const proto = Object.getPrototypeOf(value);\n    if (proto === Object.prototype || proto == null) {\n        const cloned = Object.create(proto);\n        for (const [key, val] of Object.entries(value))cloned[key] = $668be2b72857150b$export$dfdc1655ccc5b9cb(val);\n        return cloned;\n    }\n    return value;\n};\nconst $668be2b72857150b$export$efcd34ab6248d3cd = (value)=>{\n    if (typeof value !== \"object\" || value == null) return value;\n    if (typeof value._url === \"string\") return new URL(value._url);\n    if (Array.isArray(value)) return value.map((item)=>$668be2b72857150b$export$efcd34ab6248d3cd(item));\n    const proto = Object.getPrototypeOf(value);\n    if (proto === Object.prototype || proto == null) {\n        const cloned = Object.create(proto);\n        for (const [key, val] of Object.entries(value))cloned[key] = $668be2b72857150b$export$efcd34ab6248d3cd(val);\n        return cloned;\n    }\n    return value;\n};\n\n\nconst $7e86d37e78910f9e$export$31b40729666a4ae0 = crypto.randomUUID?.bind(crypto) ?? (()=>{\n    const now = Date.now();\n    const random = Math.floor(Math.random() * 0xffffffff);\n    return `${now.toString(16)}-${random.toString(16)}`;\n});\n\n\nconst $1f2cf7fc879a7105$var$createMessage = (id, others)=>({\n        __arcaea_toolbelt_msg: true,\n        id: id,\n        ...others\n    });\nvar $1f2cf7fc879a7105$export$80edbf15fa61a4db;\n(function(MessageType) {\n    MessageType[\"Ping\"] = \"ping\";\n    MessageType[\"Request\"] = \"request\";\n    MessageType[\"Response\"] = \"response\";\n    MessageType[\"Error\"] = \"error\";\n})($1f2cf7fc879a7105$export$80edbf15fa61a4db || ($1f2cf7fc879a7105$export$80edbf15fa61a4db = {}));\nconst $1f2cf7fc879a7105$export$3a821a298c42362 = (obj)=>!!(obj && obj.type === \"invoke\");\nconst $1f2cf7fc879a7105$export$9e0e49e75fa7d548 = (obj)=>!!(obj && obj.__arcaea_toolbelt_msg);\nclass $1f2cf7fc879a7105$export$3430e4169712103 {\n    #pool = new Map();\n    create(specialId) {\n        const id = specialId ?? (0, $7e86d37e78910f9e$export$31b40729666a4ae0)();\n        const task = (0, $361f21b027a6d55d$export$2a24d29abe187dc4)();\n        this.#pool.set(id, task);\n        return {\n            id: id,\n            task: task\n        };\n    }\n    done(id, value) {\n        this.#pick(id)?.done(value);\n    }\n    abort(id, reason) {\n        this.#pick(id)?.abort(reason);\n    }\n    #pick(id) {\n        const task = this.#pool.get(id);\n        if (!task) console.error(`Task id ${id} does not exist.`);\n        return task;\n    }\n}\nclass $1f2cf7fc879a7105$export$a02eed447f48479c {\n    connect;\n    constructor(connect){\n        this.connect = connect;\n    }\n    start(handler) {\n        return new $1f2cf7fc879a7105$export$e89b715ac6e60819(this.connect(), handler);\n    }\n}\nclass $1f2cf7fc879a7105$export$e89b715ac6e60819 {\n    connection;\n    #handler;\n    constructor(connection, handler){\n        this.connection = connection;\n        const { input: input } = this.connection;\n        this.#handler = (event)=>{\n            handler((0, $668be2b72857150b$export$efcd34ab6248d3cd)(event.data));\n        };\n        input.addEventListener(\"message\", this.#handler);\n    }\n    post(content) {\n        const { output: output } = this.connection;\n        output.postMessage((0, $668be2b72857150b$export$dfdc1655ccc5b9cb)(content), \"*\");\n    }\n    stop() {\n        const { input: input } = this.connection;\n        input.removeEventListener(\"message\", this.#handler);\n    }\n}\nclass $1f2cf7fc879a7105$export$83f82714246b5968 {\n    options;\n    constructor(options){\n        this.options = options;\n    }\n    start() {\n        const pool = new $1f2cf7fc879a7105$export$3430e4169712103();\n        const pingId = \"ping\";\n        const { task: { promise: connected } } = pool.create(pingId);\n        const msg = $1f2cf7fc879a7105$var$createMessage(pingId, {\n            type: $1f2cf7fc879a7105$export$80edbf15fa61a4db.Ping\n        });\n        const ping = ()=>{\n            port.post(msg);\n        };\n        let conected = false;\n        const pong = ()=>{\n            if (!conected) {\n                conected = true;\n                ping();\n            }\n        };\n        const pingTimer = setInterval(ping, 100);\n        const port = this.options.hub.start(async (data)=>{\n            if (!$1f2cf7fc879a7105$export$9e0e49e75fa7d548(data)) return;\n            switch(data.type){\n                case $1f2cf7fc879a7105$export$80edbf15fa61a4db.Ping:\n                    pong();\n                    clearInterval(pingTimer);\n                    pool.done(pingId, data);\n                    break;\n                case $1f2cf7fc879a7105$export$80edbf15fa61a4db.Request:\n                    await this.onRequest(data, port);\n                    break;\n                case $1f2cf7fc879a7105$export$80edbf15fa61a4db.Response:\n                    await this.onResponse(data, pool);\n                    break;\n                case $1f2cf7fc879a7105$export$80edbf15fa61a4db.Error:\n                default:\n                    await this.onError(data, pool);\n                    break;\n            }\n        });\n        return {\n            pool: pool,\n            api: (0, $a17045620d6d2fc4$export$580de71e7977e8d2)(async (path, args)=>{\n                await connected;\n                const { id: taskId, task: task } = pool.create();\n                const message = $1f2cf7fc879a7105$var$createMessage(taskId, {\n                    type: $1f2cf7fc879a7105$export$80edbf15fa61a4db.Request,\n                    body: {\n                        type: \"invoke\",\n                        args: args,\n                        path: path\n                    }\n                });\n                port.post(message);\n                return task.promise;\n            }),\n            stop () {\n                clearInterval(pingTimer);\n                port.stop();\n                pool.abort(pingId);\n            }\n        };\n    }\n    async onRequest(data, port) {\n        const { body: body, id: id } = data;\n        if ($1f2cf7fc879a7105$export$3a821a298c42362(body)) try {\n            let target = this.options.impl;\n            let prev = undefined;\n            const { path: path, args: args } = body;\n            for (const property of path){\n                prev = target;\n                target = Reflect.get(target, property);\n            }\n            const result = await Reflect.apply(target, prev, args);\n            const message = $1f2cf7fc879a7105$var$createMessage(id, {\n                type: $1f2cf7fc879a7105$export$80edbf15fa61a4db.Response,\n                body: result\n            });\n            port.post(message);\n        } catch (error) {\n            port.post($1f2cf7fc879a7105$var$createMessage(id, {\n                type: $1f2cf7fc879a7105$export$80edbf15fa61a4db.Error,\n                error: error\n            }));\n        }\n    }\n    async onResponse(data, pool) {\n        pool.done(data.id, data.body);\n    }\n    async onError(data, pool) {\n        pool.abort(data.id, data.error);\n    }\n}\n\n\nvar $a6fe50f2f1a45d95$export$8aa5aa332581390d;\n(function(CharacterStatus) {\n    CharacterStatus[\"Initial\"] = \"\";\n    CharacterStatus[\"Awaken\"] = \"u\";\n    /**\n     * 对立、摩耶丢失的特殊状态\n     */ CharacterStatus[\"Lost\"] = \"l\";\n})($a6fe50f2f1a45d95$export$8aa5aa332581390d || ($a6fe50f2f1a45d95$export$8aa5aa332581390d = {}));\nvar $a6fe50f2f1a45d95$export$6243394a19c2832f;\n(function(CharacterImageKind) {\n    /**\n     * 头像图标\n     */ CharacterImageKind[CharacterImageKind[\"Icon\"] = 0] = \"Icon\";\n    /**\n     * 立绘\n     */ CharacterImageKind[CharacterImageKind[\"Full\"] = 1] = \"Full\";\n})($a6fe50f2f1a45d95$export$6243394a19c2832f || ($a6fe50f2f1a45d95$export$6243394a19c2832f = {}));\n\n\nvar $bd265d509e6517ec$export$80a00690bda7f17e;\n(function(Side) {\n    /**\n     * 光芒侧\n     */ Side[Side[\"Light\"] = 0] = \"Light\";\n    /**\n     * 纷争侧\n     */ Side[Side[\"Conflict\"] = 1] = \"Conflict\";\n    /**\n     * 消色侧\n     */ Side[Side[\"Colorless\"] = 2] = \"Colorless\";\n})($bd265d509e6517ec$export$80a00690bda7f17e || ($bd265d509e6517ec$export$80a00690bda7f17e = {}));\nvar $bd265d509e6517ec$export$15ea8b6154dfaef;\n(function(Difficulty) {\n    Difficulty[\"Past\"] = \"pst\";\n    Difficulty[\"Present\"] = \"prs\";\n    Difficulty[\"Future\"] = \"ftr\";\n    Difficulty[\"Beyond\"] = \"byd\";\n})($bd265d509e6517ec$export$15ea8b6154dfaef || ($bd265d509e6517ec$export$15ea8b6154dfaef = {}));\nconst $bd265d509e6517ec$export$98fa45c372158f72 = [\n    $bd265d509e6517ec$export$15ea8b6154dfaef.Past,\n    $bd265d509e6517ec$export$15ea8b6154dfaef.Present,\n    $bd265d509e6517ec$export$15ea8b6154dfaef.Future,\n    $bd265d509e6517ec$export$15ea8b6154dfaef.Beyond\n];\nconst $bd265d509e6517ec$export$d873ff6a1db680e9 = {\n    [$bd265d509e6517ec$export$15ea8b6154dfaef.Past]: 0,\n    [$bd265d509e6517ec$export$15ea8b6154dfaef.Present]: 1,\n    [$bd265d509e6517ec$export$15ea8b6154dfaef.Future]: 2,\n    [$bd265d509e6517ec$export$15ea8b6154dfaef.Beyond]: 3\n};\nconst $bd265d509e6517ec$export$6cd762d00c0ff296 = (rating)=>`${rating.level}${rating.plus ? \"+\" : \"\"}`;\nconst $bd265d509e6517ec$export$6cb03bc901b3fff5 = (text)=>({\n        level: parseInt(text),\n        plus: text.includes(\"+\")\n    });\nconst $bd265d509e6517ec$export$1a05065c37a1b915 = (a, b)=>{\n    if (a.level !== b.level) return a.level - b.level;\n    return +!!a.plus - +!!b.plus;\n};\nvar $bd265d509e6517ec$export$ef5bc7f15dd14743;\n(function(Grade) {\n    Grade[\"EXPlus\"] = \"EX+\";\n    Grade[\"EX\"] = \"EX\";\n    Grade[\"AA\"] = \"AA\";\n    Grade[\"A\"] = \"A\";\n    Grade[\"B\"] = \"B\";\n    Grade[\"C\"] = \"C\";\n    Grade[\"D\"] = \"D\";\n})($bd265d509e6517ec$export$ef5bc7f15dd14743 || ($bd265d509e6517ec$export$ef5bc7f15dd14743 = {}));\nvar $bd265d509e6517ec$export$27c979ae2d515816;\n(function(ClearRank) {\n    ClearRank[\"Maximum\"] = \"Max\";\n    ClearRank[\"PureMemory\"] = \"PM\";\n    ClearRank[\"FullRecall\"] = \"FR\";\n    ClearRank[\"EasyClear\"] = \"EC\";\n    ClearRank[\"NormalClear\"] = \"NC\";\n    ClearRank[\"HardClear\"] = \"HC\";\n    ClearRank[\"TrackLost\"] = \"TL\";\n})($bd265d509e6517ec$export$27c979ae2d515816 || ($bd265d509e6517ec$export$27c979ae2d515816 = {}));\n\n\nconst $4c98b032bcaaa8cd$export$b44963281369e86f = (impl)=>new (0, $1f2cf7fc879a7105$export$83f82714246b5968)({\n        hub: new (0, $1f2cf7fc879a7105$export$a02eed447f48479c)(()=>{\n            const parent = window.parent;\n            if (parent === window) throw new Error(\"No parent window detected.\");\n            return {\n                input: window,\n                output: parent\n            };\n        }),\n        impl: impl\n    });\n\n\nexport {$4c98b032bcaaa8cd$export$b44963281369e86f as createRpc, $a6fe50f2f1a45d95$export$6243394a19c2832f as CharacterImageKind, $a6fe50f2f1a45d95$export$8aa5aa332581390d as CharacterStatus, $bd265d509e6517ec$export$ef5bc7f15dd14743 as Grade, $bd265d509e6517ec$export$80a00690bda7f17e as Side, $bd265d509e6517ec$export$27c979ae2d515816 as ClearRank, $bd265d509e6517ec$export$15ea8b6154dfaef as Difficulty};\n//# sourceMappingURL=generator-api.js.map\n","import { RPC, WindowMessageHub } from \"../utils/rpc\";\r\nimport { CharacterData, CharacterImage } from \"../models/character\";\r\nimport { B30Response } from \"../models/profile\";\r\nimport { Grade } from \"../models/music-play\";\r\nimport { ClipConfig, Size } from \"../utils/image-clip\";\r\n\r\nexport { CharacterImageKind, CharacterStatus } from \"../models/character\";\r\n\r\nexport { Grade, Side, ClearRank, Difficulty } from \"../models/music-play\";\r\n\r\nexport interface ImageFile {\r\n  filename: string;\r\n  resourceURL: URL;\r\n  distURL: string;\r\n  blob: Blob;\r\n  blobURL: string;\r\n}\r\n\r\nexport interface ImageCandidate {\r\n  url: URL;\r\n}\r\n\r\nexport interface CandidateResult<T extends ImageCandidate> {\r\n  type: \"basic\";\r\n  image: ImageFile;\r\n  candidate: T;\r\n}\r\n\r\nexport interface CustomImageResult {\r\n  type: \"custom\";\r\n  image: ImageFile;\r\n}\r\n\r\nexport type PickImageResult<T extends ImageCandidate> =\r\n  | CandidateResult<T>\r\n  | CustomImageResult;\r\n\r\nexport interface CustomImageOptions {\r\n  single?: string;\r\n  clip?: {\r\n    config: ClipConfig;\r\n    canvas: Size;\r\n  };\r\n}\r\n\r\nexport interface PickImageOptions {\r\n  title: string;\r\n  defaultSelected?: URL;\r\n  display: {\r\n    width: number;\r\n    height: number;\r\n    columns: number;\r\n  };\r\n  custom?: CustomImageOptions;\r\n}\r\n\r\nexport interface FileExportOptions {\r\n  filename?: string;\r\n  /**\r\n   * 默认为true，自动触发下载\r\n   */\r\n  autoDownload?: boolean;\r\n}\r\n\r\nexport type HostAPI = {\r\n  getSongList(): Promise<any>;\r\n  getPackList(): Promise<any>;\r\n  getAllCharacters(): Promise<CharacterData[]>;\r\n  getPreference(): Promise<any>;\r\n  savePreference(preference: any): Promise<void>;\r\n  resolveAssets(paths: string[]): Promise<URL[]>;\r\n  resolveCovers(\r\n    query: {\r\n      songId: string;\r\n      difficulty: number;\r\n      highQuality?: boolean;\r\n    }[]\r\n  ): Promise<URL[]>;\r\n  resolveCharacterImages(query: CharacterImage[]): Promise<URL[]>;\r\n  resolvePotentialBadge(rating: number): Promise<URL>;\r\n  resolveGradeImgs(grades: Grade[]): Promise<URL[]>;\r\n  resolveBackgrounds(): Promise<URL[]>;\r\n  getImages(resources: URL[]): Promise<ImageFile[]>;\r\n  /**\r\n   * 用户选择图片后resolve\r\n   * 用户取消后resolve为null\r\n   */\r\n  pickImage<T extends ImageCandidate>(candidates: T[], options: PickImageOptions): Promise<PickImageResult<T> | null>;\r\n  /**\r\n   * 用户点击完成以后resolve\r\n   */\r\n  exportAsImage(data: Blob, options?: FileExportOptions): Promise<void>;\r\n};\r\n\r\nexport type ClientAPI = {\r\n  setB30(response: B30Response): Promise<void>;\r\n};\r\n\r\nexport const createRpc = (impl: ClientAPI) =>\r\n  new RPC<ClientAPI, HostAPI>({\r\n    hub: new WindowMessageHub(() => {\r\n      const parent = window.parent;\r\n      if (parent === window) {\r\n        throw new Error(\"No parent window detected.\");\r\n      }\r\n      return {\r\n        input: window,\r\n        output: parent,\r\n      };\r\n    }),\r\n    impl,\r\n  });\r\n","import { CompleteSignal, Task, future } from \"./future\";\r\nimport { createInvokeCapture } from \"./invoke-capture\";\r\nimport { deserialize, serialize } from \"./transfer\";\r\nimport { uuid } from \"./uuid\";\r\n\r\nexport interface BaseMessage {\r\n  __arcaea_toolbelt_msg: true;\r\n  id: string;\r\n}\r\n\r\nconst createMessage = <T extends BaseMessage>(id: string, others: Omit<T, keyof BaseMessage>): T =>\r\n  ({\r\n    __arcaea_toolbelt_msg: true,\r\n    id,\r\n    ...others,\r\n  } as T);\r\n\r\nexport enum MessageType {\r\n  Ping = \"ping\",\r\n  Request = \"request\",\r\n  Response = \"response\",\r\n  Error = \"error\",\r\n}\r\n\r\nexport interface PingMessage extends BaseMessage {\r\n  type: MessageType.Ping;\r\n}\r\n\r\nexport interface RequestMessage<T> extends BaseMessage {\r\n  type: MessageType.Request;\r\n  body: T;\r\n}\r\n\r\nexport interface ResponseMessage<T> extends BaseMessage {\r\n  type: MessageType.Response;\r\n  body: T;\r\n}\r\n\r\nexport interface ErrorMessage extends BaseMessage {\r\n  type: MessageType.Error;\r\n  error: any;\r\n}\r\n\r\nexport type AsyncMethod = (...args: any[]) => Promise<any>;\r\n\r\nexport interface AsyncAPIs {\r\n  [property: string]: AsyncMethod | AsyncAPIs;\r\n}\r\n\r\nexport interface Invoke {\r\n  type: \"invoke\";\r\n  path: string[];\r\n  args: any[];\r\n}\r\n\r\nexport const isInvoke = (obj: unknown): obj is Invoke => !!(obj && (obj as Partial<Invoke>).type === \"invoke\");\r\n\r\nexport type Message = PingMessage | RequestMessage<any> | ResponseMessage<any> | ErrorMessage;\r\n\r\nexport interface MessageHub {\r\n  start(handler: (data: any) => void): MessagePort;\r\n}\r\n\r\nexport interface MessagePort {\r\n  post(content: any): void;\r\n  stop(): void;\r\n}\r\n\r\nexport const isMessage = (obj: unknown): obj is Message =>\r\n  !!(obj && (obj as Partial<BaseMessage>).__arcaea_toolbelt_msg);\r\n\r\nexport class TaskPool {\r\n  #pool = new Map<string, Task<any>>();\r\n  create(specialId?: string) {\r\n    const id = specialId ?? uuid();\r\n    const task = future<any>();\r\n    this.#pool.set(id, task);\r\n    return { id, task };\r\n  }\r\n  done(id: string, value: any) {\r\n    this.#pick(id)?.done(value);\r\n  }\r\n\r\n  abort(id: string, reason?: any) {\r\n    this.#pick(id)?.abort(reason);\r\n  }\r\n\r\n  #pick(id: string) {\r\n    const task = this.#pool.get(id);\r\n    if (!task) {\r\n      console.error(`Task id ${id} does not exist.`);\r\n    }\r\n    return task;\r\n  }\r\n}\r\n\r\nexport interface WindowConnection {\r\n  input: Window;\r\n  output: Window;\r\n}\r\n\r\ntype ReceiveHandler = (data: any) => void;\r\n\r\nexport class WindowMessageHub implements MessageHub {\r\n  constructor(public readonly connect: () => WindowConnection) {}\r\n\r\n  start(handler: ReceiveHandler): MessagePort {\r\n    return new WindowMessagePort(this.connect(), handler);\r\n  }\r\n}\r\n\r\nexport class WindowMessagePort implements MessagePort {\r\n  #handler;\r\n  constructor(public readonly connection: WindowConnection, handler: ReceiveHandler) {\r\n    const { input } = this.connection;\r\n    this.#handler = (event: MessageEvent) => {\r\n      handler(deserialize(event.data));\r\n    };\r\n    input.addEventListener(\"message\", this.#handler);\r\n  }\r\n\r\n  post(content: any): void {\r\n    const { output } = this.connection;\r\n    output.postMessage(serialize(content), \"*\");\r\n  }\r\n  stop(): void {\r\n    const { input } = this.connection;\r\n    input.removeEventListener(\"message\", this.#handler);\r\n  }\r\n}\r\n\r\nexport interface RPCConnection<Host extends AsyncAPIs> {\r\n  pool: TaskPool;\r\n  api: Host;\r\n  stop(): void;\r\n}\r\n\r\nexport class RPC<Client extends AsyncAPIs, Host extends AsyncAPIs> {\r\n  constructor(\r\n    public readonly options: {\r\n      hub: MessageHub;\r\n      impl: Client;\r\n    }\r\n  ) {}\r\n\r\n  start(): RPCConnection<Host> {\r\n    const pool = new TaskPool();\r\n    const pingId = \"ping\";\r\n    const {\r\n      task: { promise: connected },\r\n    } = pool.create(pingId);\r\n    const msg = createMessage<PingMessage>(pingId, { type: MessageType.Ping });\r\n    const ping = () => {\r\n      port.post(msg);\r\n    };\r\n    let conected = false;\r\n    const pong = () => {\r\n      if (!conected) {\r\n        conected = true;\r\n        ping();\r\n      }\r\n    };\r\n    const pingTimer = setInterval(ping, 100);\r\n    const port = this.options.hub.start(async (data) => {\r\n      if (!isMessage(data)) return;\r\n      switch (data.type) {\r\n        case MessageType.Ping:\r\n          pong();\r\n          clearInterval(pingTimer);\r\n          pool.done(pingId, data);\r\n          break;\r\n        case MessageType.Request:\r\n          await this.onRequest(data, port);\r\n          break;\r\n        case MessageType.Response:\r\n          await this.onResponse(data, pool);\r\n          break;\r\n        case MessageType.Error:\r\n        default:\r\n          await this.onError(data, pool);\r\n          break;\r\n      }\r\n    });\r\n\r\n    return {\r\n      pool,\r\n      api: createInvokeCapture(async (path, args) => {\r\n        await connected;\r\n        const { id: taskId, task } = pool.create();\r\n        const message = createMessage<RequestMessage<Invoke>>(taskId, {\r\n          type: MessageType.Request,\r\n          body: {\r\n            type: \"invoke\",\r\n            args,\r\n            path,\r\n          },\r\n        });\r\n        port.post(message);\r\n        return task.promise;\r\n      }) as Host,\r\n      stop() {\r\n        clearInterval(pingTimer);\r\n        port.stop();\r\n        pool.abort(pingId);\r\n      },\r\n    };\r\n  }\r\n\r\n  protected async onRequest(data: RequestMessage<any>, port: MessagePort) {\r\n    const { body, id } = data;\r\n    if (isInvoke(body)) {\r\n      try {\r\n        let target: any = this.options.impl;\r\n        let prev: any = undefined;\r\n        const { path, args } = body;\r\n        for (const property of path) {\r\n          prev = target;\r\n          target = Reflect.get(target, property);\r\n        }\r\n        const result = await Reflect.apply(target, prev, args);\r\n        const message = createMessage<ResponseMessage<any>>(id, {\r\n          type: MessageType.Response,\r\n          body: result,\r\n        });\r\n        port.post(message);\r\n      } catch (error) {\r\n        port.post(\r\n          createMessage<ErrorMessage>(id, {\r\n            type: MessageType.Error,\r\n            error: error,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  protected async onResponse(data: ResponseMessage<any>, pool: TaskPool) {\r\n    pool.done(data.id, data.body);\r\n  }\r\n\r\n  protected async onError(data: ErrorMessage, pool: TaskPool) {\r\n    pool.abort(data.id, data.error);\r\n  }\r\n}\r\n","export interface Task<T> {\r\n  promise: Promise<T>;\r\n  done(result: T): void;\r\n  abort(reason?: any): void;\r\n}\r\n\r\nexport interface CompleteSignal {\r\n  promise: Promise<void>;\r\n  done(): void;\r\n  abort(reason?: any): void;\r\n}\r\n\r\nexport const future: {\r\n  (): CompleteSignal;\r\n  <T>(): Task<T>;\r\n} = () => {\r\n  let done: any, abort: any;\r\n  const promise = new Promise<any>((resolve, reject) => {\r\n    done = resolve;\r\n    abort = reject;\r\n  });\r\n  return {\r\n    promise,\r\n    get done() {\r\n      return done;\r\n    },\r\n    get abort() {\r\n      return abort;\r\n    },\r\n  };\r\n};\r\n","export const createInvokeCapture = (handler: (path: string[], args: any[]) => any) => {\r\n  const createProxy = (path: string[]): any =>\r\n    new Proxy(function noop() {}, {\r\n      get(_target, property) {\r\n        if (typeof property === \"symbol\") throw new Error(\"Cannot get symbol property.\");\r\n        return createProxy([...path, property]);\r\n      },\r\n      apply(_target, _this, argArray) {\r\n        return handler(path, argArray);\r\n      },\r\n    });\r\n  return createProxy([]);\r\n};\r\n","export const serialize = (value: any): any => {\r\n  if (typeof value !== \"object\" || value == null) {\r\n    return value;\r\n  }\r\n  if (value instanceof URL) {\r\n    return {\r\n      _url: value.href,\r\n    };\r\n  }\r\n  if (Array.isArray(value)) {\r\n    return value.map((item) => serialize(item));\r\n  }\r\n  const proto = Object.getPrototypeOf(value);\r\n  if (proto === Object.prototype || proto == null) {\r\n    const cloned = Object.create(proto);\r\n    for (const [key, val] of Object.entries(value)) {\r\n      cloned[key] = serialize(val);\r\n    }\r\n    return cloned;\r\n  }\r\n  return value;\r\n};\r\n\r\nexport const deserialize = (value: any): any => {\r\n  if (typeof value !== \"object\" || value == null) {\r\n    return value;\r\n  }\r\n  if (typeof value._url === 'string') {\r\n    return new URL(value._url);\r\n  }\r\n  if (Array.isArray(value)) {\r\n    return value.map((item) => deserialize(item));\r\n  }\r\n  const proto = Object.getPrototypeOf(value);\r\n  if (proto === Object.prototype || proto == null) {\r\n    const cloned = Object.create(proto);\r\n    for (const [key, val] of Object.entries(value)) {\r\n      cloned[key] = deserialize(val);\r\n    }\r\n    return cloned;\r\n  }\r\n  return value;\r\n};\r\n","export const uuid =\r\n  crypto.randomUUID?.bind(crypto) ??\r\n  (() => {\r\n    const now = Date.now();\r\n    const random = Math.floor(Math.random() * 0xffffffff);\r\n    return `${now.toString(16)}-${random.toString(16)}`;\r\n  });\r\n","export interface CharacterFactors {\r\n  frag: number;\r\n  step: number;\r\n  over: number;\r\n}\r\n\r\n/**\r\n * 角色数据，不是角色实例\r\n */\r\n\r\nexport interface CharacterData {\r\n  id: number;\r\n  name: {\r\n    zh: string;\r\n    en: string;\r\n  };\r\n  can?: {\r\n    awake?: boolean;\r\n    lost?: boolean;\r\n  };\r\n  levels: { [level: number]: CharacterFactors | undefined | null };\r\n}\r\n\r\nexport enum CharacterStatus {\r\n  Initial = \"\",\r\n  Awaken = \"u\",\r\n  /**\r\n   * 对立、摩耶丢失的特殊状态\r\n   */\r\n  Lost = \"l\",\r\n}\r\n\r\nexport interface CharacterIndex {\r\n  [characterId: number]: CharacterData;\r\n}\r\n\r\nexport enum CharacterImageKind {\r\n  /**\r\n   * 头像图标\r\n   */\r\n  Icon,\r\n  /**\r\n   * 立绘\r\n   */\r\n  Full,\r\n}\r\n\r\nexport interface CharacterImage {\r\n  /**\r\n   * 可用-1代表未知\r\n   */\r\n  id: number;\r\n  status: CharacterStatus;\r\n  kind: CharacterImageKind;\r\n}\r\n\r\nexport interface CharacterInstanceData {\r\n  id: number;\r\n  level: number;\r\n  exp: number;\r\n  factors: CharacterFactors;\r\n}\r\n","export enum Side {\r\n  /**\r\n   * 光芒侧\r\n   */\r\n  Light,\r\n  /**\r\n   * 纷争侧\r\n   */\r\n  Conflict,\r\n  /**\r\n   * 消色侧\r\n   */\r\n  Colorless,\r\n}\r\n\r\nexport interface Song {\r\n  id: string;\r\n  side: Side;\r\n  alias: string[];\r\n  /**\r\n   * 直接使用游戏内id作为id，不再需要两个id\r\n   */\r\n  // sid: string;\r\n  name: string;\r\n  /*\r\n  不再使用\r\n  cover: string;\r\n  */\r\n  covers: string[];\r\n  pack: string;\r\n  dl: boolean;\r\n  /**\r\n   * bpm不是数字，因为有会变节奏的曲子\r\n   */\r\n  bpm: string;\r\n}\r\n\r\nexport enum Difficulty {\r\n  Past = \"pst\",\r\n  Present = \"prs\",\r\n  Future = \"ftr\",\r\n  Beyond = \"byd\",\r\n}\r\n\r\nexport const difficulties = [Difficulty.Past, Difficulty.Present, Difficulty.Future, Difficulty.Beyond];\r\n\r\nexport const difficultyIndexes: Record<Difficulty, number> = {\r\n  [Difficulty.Past]: 0,\r\n  [Difficulty.Present]: 1,\r\n  [Difficulty.Future]: 2,\r\n  [Difficulty.Beyond]: 3,\r\n};\r\n\r\nexport interface ChartOverride {\r\n  url?: string;\r\n  name?: string;\r\n  cover?: boolean;\r\n  bpm?: string;\r\n}\r\n\r\nexport interface Rating {\r\n  level: number;\r\n  plus?: boolean;\r\n}\r\n\r\nexport interface Chart extends Rating {\r\n  // 原来的基于wiki链接的id改为游戏内id\r\n  id: string;\r\n  songId: string;\r\n  difficulty: Difficulty;\r\n  designer: string;\r\n  constant: number;\r\n  note: number;\r\n  override?: ChartOverride;\r\n}\r\n\r\nexport const formatRating = (rating: Rating): string => `${rating.level}${rating.plus ? \"+\" : \"\"}`;\r\n\r\nexport const parseRating = (text: string): Rating => ({\r\n  level: parseInt(text),\r\n  plus: text.includes(\"+\"),\r\n});\r\n\r\nexport const compareRating = (a: Rating, b: Rating) => {\r\n  if (a.level !== b.level) return a.level - b.level;\r\n  return +!!a.plus - +!!b.plus;\r\n};\r\n\r\nexport interface SongData extends Song {\r\n  charts: Chart[];\r\n}\r\n\r\nexport interface SongIndex {\r\n  [songId: string]: SongData;\r\n}\r\n\r\nexport enum Grade {\r\n  EXPlus = \"EX+\",\r\n  EX = \"EX\",\r\n  AA = \"AA\",\r\n  A = \"A\",\r\n  B = \"B\",\r\n  C = \"C\",\r\n  D = \"D\",\r\n}\r\n\r\nexport enum ClearRank {\r\n  Maximum = \"Max\",\r\n  PureMemory = \"PM\",\r\n  FullRecall = \"FR\",\r\n  EasyClear = \"EC\",\r\n  NormalClear = \"NC\",\r\n  HardClear = \"HC\",\r\n  TrackLost = \"TL\",\r\n}\r\n\r\nexport interface ScoreResult {\r\n  chartId: string;\r\n  score: number;\r\n  grade: Grade;\r\n  potential: number;\r\n}\r\n\r\nexport type PartnerClearRank = ClearRank.EasyClear | ClearRank.NormalClear | ClearRank.HardClear | ClearRank.TrackLost;\r\n\r\nexport type PlayerInputType = \"score-only\" | \"screenshot\" | \"detailed\";\r\n\r\nexport interface NoteResult {\r\n  pure: number;\r\n  perfect: number;\r\n  far: number;\r\n  lost: number;\r\n}\r\n\r\nexport type PlayResult =\r\n  | {\r\n      type: \"score\";\r\n      chartId: string;\r\n      score: number;\r\n      clear: ClearRank | null;\r\n      date?: number | null;\r\n    }\r\n  | {\r\n      type: \"note\";\r\n      chartId: string;\r\n      result: NoteResult;\r\n      clear: ClearRank | null;\r\n      date?: number | null;\r\n    };\r\n"],"names":["$1f2cf7fc879a7105$export$80edbf15fa61a4db","$a6fe50f2f1a45d95$export$8aa5aa332581390d","$a6fe50f2f1a45d95$export$6243394a19c2832f","$bd265d509e6517ec$export$80a00690bda7f17e","$bd265d509e6517ec$export$15ea8b6154dfaef","$bd265d509e6517ec$export$ef5bc7f15dd14743","$bd265d509e6517ec$export$27c979ae2d515816","MessageType","CharacterStatus","CharacterImageKind","Side","Difficulty","Grade","ClearRank","$361f21b027a6d55d$export$2a24d29abe187dc4","done","abort","promise","Promise","resolve","reject","$a17045620d6d2fc4$export$580de71e7977e8d2","handler","createProxy","path","Proxy","get","_target","property","Error","apply","_this","argArray","$668be2b72857150b$export$dfdc1655ccc5b9cb","value","URL","_url","href","Array","isArray","map","item","proto","Object","getPrototypeOf","prototype","cloned","create","key","val","entries","$668be2b72857150b$export$efcd34ab6248d3cd","$7e86d37e78910f9e$export$31b40729666a4ae0","crypto","randomUUID","bind","now","Date","toString","random","Math","floor","$1f2cf7fc879a7105$var$createMessage","id","others","__arcaea_toolbelt_msg","$1f2cf7fc879a7105$export$3a821a298c42362","obj","type","$1f2cf7fc879a7105$export$9e0e49e75fa7d548","$1f2cf7fc879a7105$export$3430e4169712103","pool","Map","specialId","task","set","pick","reason","console","error","$1f2cf7fc879a7105$export$a02eed447f48479c","connect","constructor","start","$1f2cf7fc879a7105$export$e89b715ac6e60819","connection","input","event","data","addEventListener","post","content","output","postMessage","stop","removeEventListener","$1f2cf7fc879a7105$export$83f82714246b5968","options","pingId","connected","msg","Ping","ping","port","conected","pong","pingTimer","setInterval","hub","clearInterval","Request","onRequest","Response","onResponse","onError","api","args","taskId","message","body","prev","target","impl","Reflect","result","Past","Present","Future","Beyond","$4c98b032bcaaa8cd$export$b44963281369e86f","parent","window","createRpc"],"version":3,"file":"generator-api.js.map"}